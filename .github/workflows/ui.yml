name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      # - name: Run linter
      #   run: |
      #     npm install -g eslint typescript
      #     eslint . --ext .js,.jsx,.ts,.tsx
      #     tsc --noEmit

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: library-ui:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-image
    environment:
      name: production
    steps:
      - uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: ssh -o "StrictHostKeyChecking=no" ${REMOTE_USER}@${REMOTE_HOST} 'bash -s' < deploy.sh
        env:
          REMOTE_USER: ""
          REMOTE_HOST: ""
  
  deploy-helm:
    if: github.repository == 'skip'
    name: Deploy HELM
    needs: build-image

    runs-on: ubuntu-latest
    environment: production
    concurrency: production

    env:
      WORK_DIR: ~/app
      NAMESPACE: default
      MY_RELEASE: rsoi-ui
    steps:
      - name: Code
        uses: actions/checkout@v3

      - name: Transfer prepare-cluster
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "scripts/prepare-cluster.sh"
          target: "/${{ secrets.SSH_USER }}"

      - name: run helm
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            helm pull ${{ env.REGISTRY }}/${{ env.HELM_NAME }} --version ${{ env.HELM_VERSION }} --untar
            helm upgrade ${{ env.MY_RELEASE }} ${{ env.HELM_NAME }} -f ${{ env.HELM_NAME }}/values.yaml  \
              --install \
              --namespace ${{ env.NAMESPACE } \
              --create-namespace \
              --atomic \
              --timeout 120s \
              --debug
            sleep 100
            kubectl port-forward  svc/library-ui-svc 3000:3000 &> /dev/null &