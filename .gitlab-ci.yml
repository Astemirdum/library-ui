image: node:latest

stages:
  - lint
  - test
  - build
  - build_image
  - deploy

before_script:
  - npm install -g typescript
  - npm install -g eslint

cache:
  paths:
    - node_modules/
    - ~/.npm

lint:
  stage: lint
  script:
    - npm install
    - eslint . --ext .js,.jsx,.ts,.tsx
    - tsc --noEmit
  only:
    - merge_requests

test:
  stage: test
  script:
    - npm install
    - npm test
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
  only:
    - merge_requests

build:
  stage: build
  script:
    - npm install
    - npm run build
  only:
    - master

variables:
  IMAGE_NAME_UI: cr.yandex/crp1a6l07pa4por68v8f/ui
  IMAGE_TAG_UI: latest
  REGISTRY_USER: json_key
  CI_REGISTRY: cr.yandex

build-image:
  tags:
    - dind #docker
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  stage: build_image
  before_script:
    - cat ${CR_KEY} | docker login -u ${REGISTRY_USER} --password-stdin ${CI_REGISTRY}
  script:
    - docker build -t ${IMAGE_NAME_UI}:${IMAGE_TAG_UI} --build-arg API_ORIGIN=http://prodhost.ninja .
    - docker push ${IMAGE_NAME_UI}:${IMAGE_TAG_UI}
  only:
    - master

deploy-ci:
  image: alpine:3.17.2
  tags:
    - dind
  variables:
    REMOTE_USER: "backend55"
    REMOTE_HOST: "158.160.113.106"
  stage: deploy
  when: manual
  environment:
    name: production
  only:
    - master
  before_script:
    - apk update && apk add openssh-client
    - chmod 400 $SSH_KEY
  script:
    - sh ci/deploy.sh
